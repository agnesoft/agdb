<?php
/**
 * Comparison
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Agnesoft\AgdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * agdb_server
 *
 * Agnesoft Graph Database Server
 *
 * The version of the OpenAPI document: 0.10.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Agnesoft\AgdbApi\Model;

use \ArrayAccess;
use \Agnesoft\AgdbApi\ObjectSerializer;

/**
 * Comparison Class Doc Comment
 *
 * @category Class
 * @description Comparison of database values ([&#x60;DbValue&#x60;]) used by &#x60;key()&#x60; condition. Supports the usual set of named comparisons: &#x60;&#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &#x3D;&gt;&#x60; plus &#x60;contains()&#x60;. The comparisons are type strict except for the &#x60;contains&#x60; comparison which allows vectorized version of the base type. Notably however it does not support the &#x60;bytes&#x60; and integral types where the \&quot;contains\&quot; makes little sense (i.e. does 3 contain 1?).
 * @package  Agnesoft\AgdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Comparison implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Comparison';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'equal' => '\Agnesoft\AgdbApi\Model\DbValue',
        'greater_than' => '\Agnesoft\AgdbApi\Model\DbValue',
        'greater_than_or_equal' => '\Agnesoft\AgdbApi\Model\DbValue',
        'less_than' => '\Agnesoft\AgdbApi\Model\DbValue',
        'less_than_or_equal' => '\Agnesoft\AgdbApi\Model\DbValue',
        'not_equal' => '\Agnesoft\AgdbApi\Model\DbValue',
        'contains' => '\Agnesoft\AgdbApi\Model\DbValue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'equal' => null,
        'greater_than' => null,
        'greater_than_or_equal' => null,
        'less_than' => null,
        'less_than_or_equal' => null,
        'not_equal' => null,
        'contains' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'equal' => false,
        'greater_than' => false,
        'greater_than_or_equal' => false,
        'less_than' => false,
        'less_than_or_equal' => false,
        'not_equal' => false,
        'contains' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'equal' => 'Equal',
        'greater_than' => 'GreaterThan',
        'greater_than_or_equal' => 'GreaterThanOrEqual',
        'less_than' => 'LessThan',
        'less_than_or_equal' => 'LessThanOrEqual',
        'not_equal' => 'NotEqual',
        'contains' => 'Contains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'equal' => 'setEqual',
        'greater_than' => 'setGreaterThan',
        'greater_than_or_equal' => 'setGreaterThanOrEqual',
        'less_than' => 'setLessThan',
        'less_than_or_equal' => 'setLessThanOrEqual',
        'not_equal' => 'setNotEqual',
        'contains' => 'setContains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'equal' => 'getEqual',
        'greater_than' => 'getGreaterThan',
        'greater_than_or_equal' => 'getGreaterThanOrEqual',
        'less_than' => 'getLessThan',
        'less_than_or_equal' => 'getLessThanOrEqual',
        'not_equal' => 'getNotEqual',
        'contains' => 'getContains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('equal', $data ?? [], null);
        $this->setIfExists('greater_than', $data ?? [], null);
        $this->setIfExists('greater_than_or_equal', $data ?? [], null);
        $this->setIfExists('less_than', $data ?? [], null);
        $this->setIfExists('less_than_or_equal', $data ?? [], null);
        $this->setIfExists('not_equal', $data ?? [], null);
        $this->setIfExists('contains', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['equal'] === null) {
            $invalidProperties[] = "'equal' can't be null";
        }
        if ($this->container['greater_than'] === null) {
            $invalidProperties[] = "'greater_than' can't be null";
        }
        if ($this->container['greater_than_or_equal'] === null) {
            $invalidProperties[] = "'greater_than_or_equal' can't be null";
        }
        if ($this->container['less_than'] === null) {
            $invalidProperties[] = "'less_than' can't be null";
        }
        if ($this->container['less_than_or_equal'] === null) {
            $invalidProperties[] = "'less_than_or_equal' can't be null";
        }
        if ($this->container['not_equal'] === null) {
            $invalidProperties[] = "'not_equal' can't be null";
        }
        if ($this->container['contains'] === null) {
            $invalidProperties[] = "'contains' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets equal
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getEqual()
    {
        return $this->container['equal'];
    }

    /**
     * Sets equal
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $equal property == this
     *
     * @return self
     */
    public function setEqual($equal)
    {
        if (is_null($equal)) {
            throw new \InvalidArgumentException('non-nullable equal cannot be null');
        }
        $this->container['equal'] = $equal;

        return $this;
    }

    /**
     * Gets greater_than
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getGreaterThan()
    {
        return $this->container['greater_than'];
    }

    /**
     * Sets greater_than
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $greater_than property > this
     *
     * @return self
     */
    public function setGreaterThan($greater_than)
    {
        if (is_null($greater_than)) {
            throw new \InvalidArgumentException('non-nullable greater_than cannot be null');
        }
        $this->container['greater_than'] = $greater_than;

        return $this;
    }

    /**
     * Gets greater_than_or_equal
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getGreaterThanOrEqual()
    {
        return $this->container['greater_than_or_equal'];
    }

    /**
     * Sets greater_than_or_equal
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $greater_than_or_equal property >= this
     *
     * @return self
     */
    public function setGreaterThanOrEqual($greater_than_or_equal)
    {
        if (is_null($greater_than_or_equal)) {
            throw new \InvalidArgumentException('non-nullable greater_than_or_equal cannot be null');
        }
        $this->container['greater_than_or_equal'] = $greater_than_or_equal;

        return $this;
    }

    /**
     * Gets less_than
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getLessThan()
    {
        return $this->container['less_than'];
    }

    /**
     * Sets less_than
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $less_than property < this
     *
     * @return self
     */
    public function setLessThan($less_than)
    {
        if (is_null($less_than)) {
            throw new \InvalidArgumentException('non-nullable less_than cannot be null');
        }
        $this->container['less_than'] = $less_than;

        return $this;
    }

    /**
     * Gets less_than_or_equal
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getLessThanOrEqual()
    {
        return $this->container['less_than_or_equal'];
    }

    /**
     * Sets less_than_or_equal
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $less_than_or_equal property <= this
     *
     * @return self
     */
    public function setLessThanOrEqual($less_than_or_equal)
    {
        if (is_null($less_than_or_equal)) {
            throw new \InvalidArgumentException('non-nullable less_than_or_equal cannot be null');
        }
        $this->container['less_than_or_equal'] = $less_than_or_equal;

        return $this;
    }

    /**
     * Gets not_equal
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getNotEqual()
    {
        return $this->container['not_equal'];
    }

    /**
     * Sets not_equal
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $not_equal property != this
     *
     * @return self
     */
    public function setNotEqual($not_equal)
    {
        if (is_null($not_equal)) {
            throw new \InvalidArgumentException('non-nullable not_equal cannot be null');
        }
        $this->container['not_equal'] = $not_equal;

        return $this;
    }

    /**
     * Gets contains
     *
     * @return \Agnesoft\AgdbApi\Model\DbValue
     */
    public function getContains()
    {
        return $this->container['contains'];
    }

    /**
     * Sets contains
     *
     * @param \Agnesoft\AgdbApi\Model\DbValue $contains property.contains(this)
     *
     * @return self
     */
    public function setContains($contains)
    {
        if (is_null($contains)) {
            throw new \InvalidArgumentException('non-nullable contains cannot be null');
        }
        $this->container['contains'] = $contains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


