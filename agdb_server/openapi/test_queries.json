{
  "QueryBuilder::insert().values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).ids(QueryBuilder::search().from(\"a\").query()).query()": {
    "InsertValues": {
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      },
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      }
    }
  },
  "QueryBuilder::search().to(1).order_by(vec![DbKeyOrder::Asc(\"k\".into())]).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 0,
      "offset": 0,
      "order_by": [
        {
          "Asc": {
            "String": "k"
          }
        }
      ],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::remove().index(\"key\").query()": {
    "RemoveIndex": {
      "String": "key"
    }
  },
  "QueryBuilder::remove().ids(1).query()": {
    "Remove": {
      "Ids": [
        {
          "Id": 1
        }
      ]
    }
  },
  "QueryBuilder::search().to(1).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::select().node_count().query()": {
    "SelectNodeCount": {}
  },
  "QueryBuilder::search().index(\"age\").value(20).query()": {
    "Search": {
      "algorithm": "Index",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "KeyValue": {
              "key": {
                "String": "age"
              },
              "value": {
                "Equal": {
                  "I64": 20
                }
              }
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::insert().element(&T::default()).query()": {
    "InsertValues": {
      "ids": {
        "Ids": [
          {
            "Id": 0
          }
        ]
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "value1"
              },
              "value": {
                "String": ""
              }
            },
            {
              "key": {
                "String": "value2"
              },
              "value": {
                "I64": 0
              }
            }
          ]
        ]
      }
    }
  },
  "QueryBuilder::search().breadth_first().from(\"a\").query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Alias": "a"
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().nodes().aliases(vec![\"a\",\"b\"]).values(vec![vec![(\"k\",1).into()],vec![(\"k\",2).into()]]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 1
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      },
      "aliases": [
        "a",
        "b"
      ],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::search().from(1).order_by(vec![DbKeyOrder::Desc(\"k\".into())]).offset(10).limit(5).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 5,
      "offset": 10,
      "order_by": [
        {
          "Desc": {
            "String": "k"
          }
        }
      ],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).where_().not().keys(vec![\"k1\".into(),\"k2\".into()]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "Not",
          "data": {
            "Keys": [
              {
                "String": "k1"
              },
              {
                "String": "k2"
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().key(\"k\").value(Comparison::Equal(1.into())).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "KeyValue": {
              "key": {
                "String": "k"
              },
              "value": {
                "Equal": {
                  "I64": 1
                }
              }
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::insert().nodes().ids(vec![1,2]).values(vec![vec![(\"k\",\"v\").into()],vec![(1,10).into()]]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "String": "v"
              }
            }
          ],
          [
            {
              "key": {
                "I64": 1
              },
              "value": {
                "I64": 10
              }
            }
          ]
        ]
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().nodes().ids(1).count(1).query()": {
    "InsertNodes": {
      "count": 1,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      }
    }
  },
  "QueryBuilder::search().depth_first().from(\"a\").query()": {
    "Search": {
      "algorithm": "DepthFirst",
      "origin": {
        "Alias": "a"
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).where_().beyond().keys(vec![\"k\".into()]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "Beyond",
          "data": {
            "Keys": [
              {
                "String": "k"
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::insert().edges().from(QueryBuilder::search().from(\"a\").where_().node().query()).to(QueryBuilder::search().from(\"b\").where_().node().query()).values(vec![vec![(\"k\",1).into()],vec![(\"k\",2).into()]]).query()": {
    "InsertEdges": {
      "from": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "to": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "b"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 1
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      },
      "each": false
    }
  },
  "QueryBuilder::search().from(1).order_by(vec![DbKeyOrder::Desc(\"k\".into())]).offset(10).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 10,
      "order_by": [
        {
          "Desc": {
            "String": "k"
          }
        }
      ],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).where_().node().or().edge().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        },
        {
          "logic": "Or",
          "modifier": "None",
          "data": "Edge"
        }
      ]
    }
  },
  "QueryBuilder::insert().index(\"key\").query()": {
    "InsertIndex": {
      "String": "key"
    }
  },
  "QueryBuilder::remove().aliases(\"a\").query()": {
    "RemoveAliases": [
      "a"
    ]
  },
  "QueryBuilder::insert().aliases(vec![\"a\",\"b\"]).ids(vec![1,2]).query()": {
    "InsertAlias": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "aliases": [
        "a",
        "b"
      ]
    }
  },
  "QueryBuilder::search().from(1).offset(10).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 10,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().edges().from(1).to(2).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::insert().edges().from(vec![1,2]).to(vec![2,3]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          },
          {
            "Id": 3
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::insert().edges().from(\"a\").to(vec![1,2]).values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      },
      "each": false
    }
  },
  "QueryBuilder::insert().nodes().ids(vec![\"a\",\"b\"]).count(1).query()": {
    "InsertNodes": {
      "count": 1,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Alias": "a"
          },
          {
            "Alias": "b"
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().nodes().ids(vec![1,2]).count(1).query()": {
    "InsertNodes": {
      "count": 1,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().elements(&[T::default(),T::default()]).query()": {
    "InsertValues": {
      "ids": {
        "Ids": [
          {
            "Id": 0
          },
          {
            "Id": 0
          }
        ]
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "value1"
              },
              "value": {
                "String": ""
              }
            },
            {
              "key": {
                "String": "value2"
              },
              "value": {
                "I64": 0
              }
            }
          ],
          [
            {
              "key": {
                "String": "value1"
              },
              "value": {
                "String": ""
              }
            },
            {
              "key": {
                "String": "value2"
              },
              "value": {
                "I64": 0
              }
            }
          ]
        ]
      }
    }
  },
  "QueryBuilder::select().ids(vec![1,2]).query()": {
    "SelectValues": {
      "keys": [],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().edges().ids(vec![-3,-4]).from(1).to(2).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": [
          {
            "Id": -3
          },
          {
            "Id": -4
          }
        ]
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::insert().nodes().ids(\"a\").count(1).query()": {
    "InsertNodes": {
      "count": 1,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().nodes().values(vec![vec![(\"k\",1).into()],vec![(\"k\",2).into()]]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 1
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      },
      "aliases": [],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::insert().edges().ids(-3).from(1).to(2).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": [
          {
            "Id": -3
          }
        ]
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::select().aliases().ids(vec![1,2]).query()": {
    "SelectAliases": {
      "Ids": [
        {
          "Id": 1
        },
        {
          "Id": 2
        }
      ]
    }
  },
  "QueryBuilder::insert().nodes().ids(QueryBuilder::search().from(1).query()).count(1).query()": {
    "InsertNodes": {
      "count": 1,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Id": 1
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      }
    }
  },
  "QueryBuilder::select().aliases().ids(QueryBuilder::search().from(1).query()).query()": {
    "SelectAliases": {
      "Search": {
        "algorithm": "BreadthFirst",
        "origin": {
          "Id": 1
        },
        "destination": {
          "Id": 0
        },
        "limit": 0,
        "offset": 0,
        "order_by": [],
        "conditions": []
      }
    }
  },
  "QueryBuilder::search().from(1).where_().distance(CountComparison::LessThan(3)).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "Distance": {
              "LessThan": 3
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().not_beyond().ids(\"a\").query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "NotBeyond",
          "data": {
            "Ids": [
              {
                "Alias": "a"
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::remove().ids(\"a\").query()": {
    "Remove": {
      "Ids": [
        {
          "Alias": "a"
        }
      ]
    }
  },
  "QueryBuilder::remove().ids(vec![1,2]).query()": {
    "Remove": {
      "Ids": [
        {
          "Id": 1
        },
        {
          "Id": 2
        }
      ]
    }
  },
  "QueryBuilder::select().keys().ids(QueryBuilder::search().from(1).query()).query()": {
    "SelectKeys": {
      "Search": {
        "algorithm": "BreadthFirst",
        "origin": {
          "Id": 1
        },
        "destination": {
          "Id": 0
        },
        "limit": 0,
        "offset": 0,
        "order_by": [],
        "conditions": []
      }
    }
  },
  "QueryBuilder::insert().edges().from(\"a\").to(vec![1,2]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::search().to(1).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).where_().edge_count(CountComparison::GreaterThan(2)).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "EdgeCount": {
              "GreaterThan": 2
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::insert().values(vec![vec![(\"k\",\"v\").into(),(1,10).into()],vec![(\"k\",2).into()]]).ids(QueryBuilder::search().from(\"a\").query()).query()": {
    "InsertValues": {
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "String": "v"
              }
            },
            {
              "key": {
                "I64": 1
              },
              "value": {
                "I64": 10
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      }
    }
  },
  "QueryBuilder::select().key_count().ids(vec![1,2]).query()": {
    "SelectKeyCount": {
      "Ids": [
        {
          "Id": 1
        },
        {
          "Id": 2
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().node().or().where_().edge().and().key(\"k\").value(Comparison::Equal(1.into())).end_where().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        },
        {
          "logic": "Or",
          "modifier": "None",
          "data": {
            "Where": [
              {
                "logic": "And",
                "modifier": "None",
                "data": "Edge"
              },
              {
                "logic": "And",
                "modifier": "None",
                "data": {
                  "KeyValue": {
                    "key": {
                      "String": "k"
                    },
                    "value": {
                      "Equal": {
                        "I64": 1
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).order_by(vec![DbKeyOrder::Asc(\"k\".into())]).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [
        {
          "Asc": {
            "String": "k"
          }
        }
      ],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::search().to(1).offset(1).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 0,
      "offset": 1,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).limit(1).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 1,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::search().to(1).limit(1).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 1,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().nodes().aliases(vec![\"a\",\"b\"]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Single": []
      },
      "aliases": [
        "a",
        "b"
      ],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::search().from(1).where_().node().and().distance(CountComparison::GreaterThanOrEqual(3)).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        },
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "Distance": {
              "GreaterThanOrEqual": 3
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::select().keys().ids(\"a\").query()": {
    "SelectKeys": {
      "Ids": [
        {
          "Alias": "a"
        }
      ]
    }
  },
  "QueryBuilder::insert().edges().from(vec![1,2]).to(vec![2,3]).each().values(vec![vec![(\"k\",1).into()],vec![(\"k\",2).into()]]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          },
          {
            "Id": 3
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 1
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      },
      "each": true
    }
  },
  "QueryBuilder::insert().values(vec![vec![(\"k\",\"v\").into(),(1,10).into()],vec![(\"k\",2).into()]]).ids(vec![1,2]).query()": {
    "InsertValues": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "String": "v"
              }
            },
            {
              "key": {
                "I64": 1
              },
              "value": {
                "I64": 10
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      }
    }
  },
  "QueryBuilder::insert().aliases(\"a\").ids(1).query()": {
    "InsertAlias": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      },
      "aliases": [
        "a"
      ]
    }
  },
  "QueryBuilder::select().edge_count_from().ids(vec![1,2]).query()": {
    "SelectEdgeCount": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "from": true,
      "to": false
    }
  },
  "QueryBuilder::insert().aliases(\"a\").ids(\"b\").query()": {
    "InsertAlias": {
      "ids": {
        "Ids": [
          {
            "Alias": "b"
          }
        ]
      },
      "aliases": [
        "a"
      ]
    }
  },
  "QueryBuilder::remove().aliases(vec![\"a\",\"b\"]).query()": {
    "RemoveAliases": [
      "a",
      "b"
    ]
  },
  "QueryBuilder::search().from(1).order_by(vec![DbKeyOrder::Desc(\"age\".into()),DbKeyOrder::Asc(\"name\".into())]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [
        {
          "Desc": {
            "String": "age"
          }
        },
        {
          "Asc": {
            "String": "name"
          }
        }
      ],
      "conditions": []
    }
  },
  "QueryBuilder::select().keys().ids(vec![1,2]).query()": {
    "SelectKeys": {
      "Ids": [
        {
          "Id": 1
        },
        {
          "Id": 2
        }
      ]
    }
  },
  "QueryBuilder::search().from(\"a\").query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Alias": "a"
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::select().key_count().ids(\"a\").query()": {
    "SelectKeyCount": {
      "Ids": [
        {
          "Alias": "a"
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().keys(vec![\"k1\".into(),\"k2\".into()]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "Keys": [
              {
                "String": "k1"
              },
              {
                "String": "k2"
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::insert().edges().from(vec![1,2]).to(vec![2,3]).each().values_uniform(vec![(\"k\",1).into(),(\"k\",2).into()]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          },
          {
            "Id": 3
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "I64": 1
            }
          },
          {
            "key": {
              "String": "k"
            },
            "value": {
              "I64": 2
            }
          }
        ]
      },
      "each": true
    }
  },
  "QueryBuilder::select().edge_count_to().ids(vec![1,2]).query()": {
    "SelectEdgeCount": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "from": false,
      "to": true
    }
  },
  "QueryBuilder::insert().edges().from(\"a\").to(vec![1,2]).values(vec![vec![(\"k\",1).into()],vec![(\"k\",2).into()]]).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Multi": [
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 1
              }
            }
          ],
          [
            {
              "key": {
                "String": "k"
              },
              "value": {
                "I64": 2
              }
            }
          ]
        ]
      },
      "each": false
    }
  },
  "QueryBuilder::search().from(1).where_().node().or().where_().edge().and().key(\"k\").value(Comparison::Contains(1.into())).end_where().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        },
        {
          "logic": "Or",
          "modifier": "None",
          "data": {
            "Where": [
              {
                "logic": "And",
                "modifier": "None",
                "data": "Edge"
              },
              {
                "logic": "And",
                "modifier": "None",
                "data": {
                  "KeyValue": {
                    "key": {
                      "String": "k"
                    },
                    "value": {
                      "Contains": {
                        "I64": 1
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().elements().query()": {
    "Search": {
      "algorithm": "Elements",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::select().ids(\"a\").query()": {
    "SelectValues": {
      "keys": [],
      "ids": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      }
    }
  },
  "QueryBuilder::select().key_count().ids(QueryBuilder::search().from(1).query()).query()": {
    "SelectKeyCount": {
      "Search": {
        "algorithm": "BreadthFirst",
        "origin": {
          "Id": 1
        },
        "destination": {
          "Id": 0
        },
        "limit": 0,
        "offset": 0,
        "order_by": [],
        "conditions": []
      }
    }
  },
  "QueryBuilder::search().from(1).limit(5).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 5,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().edges().ids(QueryBuilder::search().from(1).where_().edge().query()).from(1).to(2).query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          }
        ]
      },
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Id": 1
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Edge"
            }
          ]
        }
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::insert().edges().from(QueryBuilder::search().from(\"a\").where_().node().query()).to(QueryBuilder::search().from(\"b\").where_().node().query()).query()": {
    "InsertEdges": {
      "from": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "to": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "b"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::insert().nodes().count(2).values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).query()": {
    "InsertNodes": {
      "count": 2,
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      },
      "aliases": [],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::select().values(vec![\"k\".into(),\"k2\".into()]).ids(vec![1,2]).query()": {
    "SelectValues": {
      "keys": [
        {
          "String": "k"
        },
        {
          "String": "k2"
        }
      ],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().edges().from(QueryBuilder::search().from(\"a\").where_().node().query()).to(QueryBuilder::search().from(\"b\").where_().node().query()).values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).query()": {
    "InsertEdges": {
      "from": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "to": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "b"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": [
            {
              "logic": "And",
              "modifier": "None",
              "data": "Node"
            }
          ]
        }
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      },
      "each": false
    }
  },
  "QueryBuilder::insert().nodes().ids(\"a\").aliases(\"a\").query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Single": []
      },
      "aliases": [
        "a"
      ],
      "ids": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      }
    }
  },
  "QueryBuilder::insert().values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).ids(vec![1,2]).query()": {
    "InsertValues": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      }
    }
  },
  "QueryBuilder::remove().ids(vec![\"a\",\"b\"]).query()": {
    "Remove": {
      "Ids": [
        {
          "Alias": "a"
        },
        {
          "Alias": "b"
        }
      ]
    }
  },
  "QueryBuilder::remove().ids(QueryBuilder::search().from(\"a\").query()).query()": {
    "Remove": {
      "Search": {
        "algorithm": "BreadthFirst",
        "origin": {
          "Alias": "a"
        },
        "destination": {
          "Id": 0
        },
        "limit": 0,
        "offset": 0,
        "order_by": [],
        "conditions": []
      }
    }
  },
  "QueryBuilder::remove().values(vec![\"k1\".into(),\"k2\".into()]).ids(vec![1,2]).query()": {
    "RemoveValues": {
      "keys": [
        {
          "String": "k1"
        },
        {
          "String": "k2"
        }
      ],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::select().ids(QueryBuilder::search().from(1).query()).query()": {
    "SelectValues": {
      "keys": [],
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Id": 1
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      }
    }
  },
  "QueryBuilder::select().values(vec![\"k\".into(),\"k2\".into()]).ids(\"a\").query()": {
    "SelectValues": {
      "keys": [
        {
          "String": "k"
        },
        {
          "String": "k2"
        }
      ],
      "ids": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      }
    }
  },
  "QueryBuilder::remove().values(vec![\"k1\".into(),\"k2\".into()]).ids(QueryBuilder::search().from(\"a\").query()).query()": {
    "RemoveValues": {
      "keys": [
        {
          "String": "k1"
        },
        {
          "String": "k2"
        }
      ],
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Alias": "a"
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      }
    }
  },
  "QueryBuilder::select().edge_count().ids(vec![1,2]).query()": {
    "SelectEdgeCount": {
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "from": true,
      "to": true
    }
  },
  "QueryBuilder::select().aliases().query()": {
    "SelectAllAliases": {}
  },
  "QueryBuilder::search().from(\"a\").to(\"b\").query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Alias": "a"
      },
      "destination": {
        "Alias": "b"
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).order_by(vec![DbKeyOrder::Desc(\"k\".into())]).limit(5).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 5,
      "offset": 0,
      "order_by": [
        {
          "Desc": {
            "String": "k"
          }
        }
      ],
      "conditions": []
    }
  },
  "QueryBuilder::search().from(1).offset(10).limit(5).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 5,
      "offset": 10,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().nodes().count(2).query()": {
    "InsertNodes": {
      "count": 2,
      "values": {
        "Single": []
      },
      "aliases": [],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::select().values(vec![\"k\".into(),\"k2\".into()]).ids(QueryBuilder::search().from(1).query()).query()": {
    "SelectValues": {
      "keys": [
        {
          "String": "k"
        },
        {
          "String": "k2"
        }
      ],
      "ids": {
        "Search": {
          "algorithm": "BreadthFirst",
          "origin": {
            "Id": 1
          },
          "destination": {
            "Id": 0
          },
          "limit": 0,
          "offset": 0,
          "order_by": [],
          "conditions": []
        }
      }
    }
  },
  "QueryBuilder::search().from(1).where_().edge().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Edge"
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().edge_count_to(CountComparison::NotEqual(1)).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "EdgeCountTo": {
              "NotEqual": 1
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().ids(vec![1,2]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "Ids": [
              {
                "Id": 1
              },
              {
                "Id": 2
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().not().ids(vec![1,2]).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "Not",
          "data": {
            "Ids": [
              {
                "Id": 1
              },
              {
                "Id": 2
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().node().or().where_().edge().and().key(\"k\").value(Comparison::Contains((vec![1,2]).into())).end_where().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        },
        {
          "logic": "Or",
          "modifier": "None",
          "data": {
            "Where": [
              {
                "logic": "And",
                "modifier": "None",
                "data": "Edge"
              },
              {
                "logic": "And",
                "modifier": "None",
                "data": {
                  "KeyValue": {
                    "key": {
                      "String": "k"
                    },
                    "value": {
                      "Contains": {
                        "VecI64": [
                          1,
                          2
                        ]
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).offset(1).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 1,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::insert().nodes().aliases(vec![\"a\",\"b\"]).values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      },
      "aliases": [
        "a",
        "b"
      ],
      "ids": {
        "Ids": []
      }
    }
  },
  "QueryBuilder::insert().edges().from(\"a\").to(\"b\").query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Alias": "a"
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Alias": "b"
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": false
    }
  },
  "QueryBuilder::search().from(1).where_().edge_count_from(CountComparison::Equal(1)).query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": {
            "EdgeCountFrom": {
              "Equal": 1
            }
          }
        }
      ]
    }
  },
  "QueryBuilder::search().from(1).where_().node().query()": {
    "Search": {
      "algorithm": "BreadthFirst",
      "origin": {
        "Id": 1
      },
      "destination": {
        "Id": 0
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": [
        {
          "logic": "And",
          "modifier": "None",
          "data": "Node"
        }
      ]
    }
  },
  "QueryBuilder::insert().nodes().ids(vec![1,2]).values_uniform(vec![(\"k\",\"v\").into(),(1,10).into()]).query()": {
    "InsertNodes": {
      "count": 0,
      "values": {
        "Single": [
          {
            "key": {
              "String": "k"
            },
            "value": {
              "String": "v"
            }
          },
          {
            "key": {
              "I64": 1
            },
            "value": {
              "I64": 10
            }
          }
        ]
      },
      "aliases": [],
      "ids": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      }
    }
  },
  "QueryBuilder::search().depth_first().to(1).query()": {
    "Search": {
      "algorithm": "DepthFirst",
      "origin": {
        "Id": 0
      },
      "destination": {
        "Id": 1
      },
      "limit": 0,
      "offset": 0,
      "order_by": [],
      "conditions": []
    }
  },
  "QueryBuilder::insert().edges().from(vec![1,2]).to(vec![2,3]).each().query()": {
    "InsertEdges": {
      "from": {
        "Ids": [
          {
            "Id": 1
          },
          {
            "Id": 2
          }
        ]
      },
      "to": {
        "Ids": [
          {
            "Id": 2
          },
          {
            "Id": 3
          }
        ]
      },
      "ids": {
        "Ids": []
      },
      "values": {
        "Single": []
      },
      "each": true
    }
  },
  "QueryBuilder::select().indexes().query()": {
    "SelectIndexes": {}
  }
}
